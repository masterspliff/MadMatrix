@page "/test-component"
@using core.Models
@using webapp.Service
@using webapp.Components.Create
@using webapp.Components.Lists
@using webapp.Service.LoginService
@inject IEventService EventService
@inject ITaskService TaskService
@inject ILocationService LocationService
@inject ILoginService LoginService

<div class="container-fluid">
    @if (isCreating)
    {
        <div class="row mb-3">
            <div class="col">
                <button class="btn btn-secondary" @onclick="GoBack">
                    <i class="bi bi-arrow-left"></i> Gå tilbage
                </button>
            </div>
        </div>

        @switch (selectedType)
        {
            case "Event":
                <CreateEvent OnEventCreated="HandleItemCreated" />
                break;
            case "Task":
                <CreateTask OnTaskCreated="HandleItemCreated" />
                break;
            case "Location":
                <CreateLocation OnLocationCreated="HandleItemCreated" />
                break;
        }
    }
    else
    {
        <div class="row mb-3">
            <div class="col">
                <div class="input-group">
                    <!-- The @bind:after parameter will ensure RefreshData is called after the selectedType value has been updated -->
                    <select class="form-select" @bind="selectedType" @bind:after="RefreshData">
                        <option value="">Vælg type...</option>
                        <option value="Event">Events</option>
                        <option value="Task">Opgaver</option>
                        <option value="Location">Lokationer</option>
                    </select>
                    @if (currentUser?.Roles.Contains(UserRole.Administrator) == true)
                    {
                        <button class="btn btn-primary" @onclick="() => isCreating = true">
                            <i class="bi bi-plus-lg"></i> Opret ny
                        </button>
                    }
                </div>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(selectedType))
        {
            <div class="row">
                <div class="col">
                    <ListContainer>
                        @switch (selectedType)
                        {
                            case "Event":
                                <GenericList TItem="TaskEvent" Items="events" OnItemSelected="SelectEvent">
                                    <ItemTemplate>
                                        @context.Title
                                    </ItemTemplate>
                                </GenericList>
                                break;
                            case "Task":
                                <GenericList TItem="TaskItem" Items="tasks" OnItemSelected="SelectTask">
                                    <ItemTemplate>
                                        @context.Title
                                    </ItemTemplate>
                                </GenericList>
                                break;
                            case "Location":
                                <GenericList TItem="Location" Items="locations" OnItemSelected="SelectLocation">
                                    <ItemTemplate>
                                        @context.Name
                                    </ItemTemplate>
                                </GenericList>
                                break;
                        }
                    </ListContainer>
                </div>
            </div>
        }

        @* Modals for creating new items *@
        <ModalWrapper ModalId="eventModal" ModalSize="modal-xl">
            <CreateEvent OnEventCreated="RefreshData"/>
        </ModalWrapper>

        <ModalWrapper ModalId="taskModal" ModalSize="modal-xl">
            <CreateTask OnTaskCreated="RefreshData"/>
        </ModalWrapper>

        <ModalWrapper ModalId="locationModal" ModalSize="modal-xl">
            <CreateLocation OnLocationCreated="RefreshData"/>
        </ModalWrapper>
    }
</div>

@code {
    private string selectedType = "";
    private User? currentUser;
    private List<TaskEvent>? events;
    private List<TaskItem>? tasks;
    private List<Location>? locations;
    private bool isCreating = false;

    protected override async Task OnInitializedAsync()
    {
        currentUser = await LoginService.GetCurrentUser();
        await RefreshData();
    }

    private async Task RefreshData()
    {
        try
        {
            switch (selectedType)
            {
                case "Event":
                    events = (await EventService.GetAllEventsAsync())?.ToList();
                    break;
                case "Task":
                    tasks = (await TaskService.LoadAllTask())?.ToList();
                    break;
                case "Location":
                    locations = (await LocationService.GetAllLocationsAsync())?.ToList();
                    break;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error refreshing data: {ex.Message}");
        }

        StateHasChanged();
    }

    private async Task HandleItemCreated()
    {
        await RefreshData();
        isCreating = false;
        StateHasChanged();
    }

    private void GoBack()
    {
        isCreating = false;
        StateHasChanged();
    }

    private async Task SelectEvent(TaskEvent evt)
    {
        // Implement event selection logic
    }

    private async Task SelectTask(TaskItem task)
    {
        // Implement task selection logic
    }

    private async Task SelectLocation(Location location)
    {
        // Implement location selection logic
    }

}
