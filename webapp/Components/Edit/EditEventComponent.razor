@using webapp.Service
@using core.Models
@inject IEventService EventService
@inject ILocationService LocationService
@inject NavigationManager NavigationManager

<EditForm Model="EditedEvent" OnValidSubmit="SaveEdit" class="card" style="max-width: 800px; margin: auto; padding: 20px;">

    <h4 class="text-center">Rediger Event</h4>

    <div class="form-group">
        <label for="Title">Titel</label>
        <InputText id="Title" class="form-control" @bind-Value="EditedEvent.Title" placeholder="Indtast Titel" />
    </div>

    <div class="form-group">
        <label for="Date">Dato</label>
        <InputDate id="Date" class="form-control" @bind-Value="EditedEvent.DateForEvent" />
    </div>

    <div class="form-group">
        <label for="Location">Lokation</label>
        <InputSelect id="Location" class="form-control" @bind-Value="EditedEvent.LocationId">
            <option value="0">Vælg Lokation</option>
            @foreach (var location in Locations)
            {
                <option value="@location.Id">@location.Name</option>
            }
        </InputSelect>
    </div>

    <div class="form-group">
        <label for="FoodChoice">Madvalg</label>
        <InputText id="FoodChoice" class="form-control" @bind-Value="EditedEvent.FoodChoices" placeholder="Indtast madvalg" />
    </div>

    <div class="form-group">
        <label for="SpecialRequest">Særlige mad behov</label>
        <InputText id="SpecialRequest" class="form-control" @bind-Value="EditedEvent.SpecialRequest" placeholder="Indtast special ønsker til mad" />
    </div>

    <div class="form-group">
        <label for="ByCustomer">Kunde</label>
        <InputText id="ByCustomer" class="form-control" @bind-Value="EditedEvent.ByCustomer" placeholder="Indtast kunde" />
    </div>

    <div class="form-group">
        <label for="Participant">Deltagere</label>
        <InputNumber id="Participant" class="form-control" @bind-Value="EditedEvent.Participants" />
    </div>

    <div class="form-group text-center mt-4">
        <button type="button" class="btn btn-secondary me-2" data-bs-dismiss="modal">Annuller</button>
        <button type="submit" class="btn btn-primary">Gem Ændringer</button>
    </div>

</EditForm>

@code {
    /// <summary>
    /// The ID of the event being edited.
    /// Passed as a parameter from the parent component.
    /// </summary>
    [Parameter]
    public int Id { get; set; }

    /// <summary>
    /// The event being edited, containing all editable properties.
    /// Initialized as a new event and populated when component loads.
    /// </summary>
    private TaskEvent EditedEvent = new TaskEvent();

    /// <summary>
    /// Collection of all available locations that can be assigned to the event.
    /// Loaded when the component initializes.
    /// </summary>
    private IEnumerable<core.Models.Location> Locations = Enumerable.Empty<core.Models.Location>();

    /// <summary>
    /// Loads the event data and available locations when the component parameters change.
    /// Fetches the event details using the provided ID and populates the edit form.
    /// </summary>
    /// <returns>A task representing the asynchronous operation</returns>
    protected override async Task OnParametersSetAsync()
    {
        Locations = await LocationService.GetAllLocationsAsync();
        try
        {
            var eventItem = await EventService.GetEventByIdAsync(Id);
            if (eventItem != null)
            {
                EditedEvent = eventItem;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading event: {ex.Message}");
        }
    }

    /// <summary>
    /// Callback event triggered when the event is successfully saved.
    /// Used to notify the parent component to refresh its data.
    /// </summary>
    [Parameter]
    public EventCallback OnSaveCompleted { get; set; }

    /// <summary>
    /// Saves the edited event using the EventService.
    /// Triggers the OnSaveCompleted callback on success.
    /// </summary>
    /// <returns>
    /// A task representing the asynchronous operation.
    /// On success, invokes OnSaveCompleted.
    /// On failure, logs the error to console.
    /// </returns>
    private async Task SaveEdit()
    {
        try
        {
            var isSuccess = await EventService.UpdateEventAsync(Id, EditedEvent);
            if (isSuccess)
            {
                await OnSaveCompleted.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving event: {ex.Message}");
        }
    }
}
