@page "/editprofile"
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject ILoginService loginService
@inject NavigationManager navManager
@inject IUserService UserService
@using webapp.Service
@using webapp.Service.LoginService

<h3>Profiloversigt</h3>

<div class="edit-profile-form">
    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (user != null && editContext != null)
    {
        <EditForm EditContext="@editContext" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="firstName">Fornavn</label>
            <InputText id="firstName" class="form-control" @bind-Value="user.FirstName" disabled="@(!isEditable)" />
        </div>

        <div class="form-group">
            <label for="lastName">Efternavn</label>
            <InputText id="lastName" class="form-control" @bind-Value="user.LastName" disabled="@(!isEditable)" />
        </div>

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" @bind-Value="user.Email" disabled="@(!isEditable)" />
        </div>

        <div class="form-group">
            <label for="password">Adgangskode</label>
            <InputText id="password" class="form-control" @bind-Value="user.Password" disabled="@(!isEditable)" />
        </div>

        <div class="form-group">
            <label for="phoneNumber">Telefonnummer</label>
            <InputText id="phoneNumber" class="form-control" @bind-Value="user.PhoneNumber" disabled="@(!isEditable)" />
        </div>

        <button type="button" class="btn btn-primary" style="margin-top: 20px" @onclick="HandleButtonClick">
            @(isEditable ? "Gem profil" : "Rediger profil")
        </button>
        <div>@saveMessage</div>
    </EditForm>
    }
    else
    {
    <p>Brugerdata kunne ikke hentes. Vær venlig at logge ind igen.</p>
    }
</div>

@code {
private User? user;
private bool isEditable = false;
private string saveMessage = "";
private EditContext? editContext;
private bool isLoading = true;

[Inject]
private IUserService userService { get; set; }

protected override async Task OnInitializedAsync()
{
    try
    {
        isLoading = true;
        StateHasChanged();
        
        user = await loginService.GetCurrentUser();
        if (user == null)
        {
            // Redirect to dashboard if no user data is found
            navManager.NavigateTo("/dashboard");
            return;
        }
        
        editContext = new EditContext(user);
    }
    catch (Exception ex)
    {
        // Handle errors, e.g., log or show an error message
        saveMessage = "Fejl under indlæsning af brugerdata.";
        Console.WriteLine($"Error loading user data: {ex.Message}");
    }
    finally 
    {
        isLoading = false;
        StateHasChanged();
    }
}

private async Task HandleValidSubmit()
{
try
{
await SaveUserData(user);
}
catch (Exception ex)
{
// Handle errors, e.g., log or show an error message
saveMessage = "Fejl under gemning af data.";
}
}

private void ToggleEditMode()
{
isEditable = !isEditable;
StateHasChanged();
}

private async Task HandleButtonClick()
{
if (isEditable)
{
await HandleValidSubmit();
}
ToggleEditMode();
}

public async Task SaveUserData(User user)
{
try
{
await userService.UpdateUser(user);
saveMessage = "Ændringerne er blevet gemt.";
StateHasChanged();

// Reset the message after 2 seconds
await Task.Delay(2000);
saveMessage = string.Empty;
StateHasChanged();
}
catch (Exception ex)
{
saveMessage = "Der opstod en fejl under gemning.";
StateHasChanged();

// Reset the message after 2 seconds
await Task.Delay(2000);
saveMessage = string.Empty;
StateHasChanged();
}
}
}
