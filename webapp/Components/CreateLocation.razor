@using core.Models
@using webapp.Service
@using webapp.Components.Shared
@inject ILocationService LocationService



@* 
    This component uses FormInput with different TValue types:
    - TValue="string" for the location name text input
    - TValue="int" for the location selection dropdown
    
    The generic FormInput component handles type conversion and validation automatically,
    making the form handling type-safe and reducing boilerplate code.
*@

<EditForm Model="@locationModel" OnValidSubmit="HandleCreateLocation" class="card location-card p-3" style="border: none">
    <div class="row justify-content-center">
        <h3 style="margin-bottom: 30px">Lokation adminstration</h3>
        <div class="col-md-6">
            <h4>Opret Lokation</h4>
            <FormInput TValue="string"
                Id="locationName" 
                Label="Lokation navn" 
                Type="text" 
                @bind-Value="locationModel.Name" 
                Placeholder="Navngiv lokationens navn" />
            <div class="form-group" style="margin-top: 10px">
                <button type="submit" class="btn btn-primary" style="width: 100%">Opret Location</button>
            </div>
        </div>
        
        <div class="col-md-6">
            <h4>Slet Location</h4>
            <FormInput TValue="int"
                Id="locationDelete" 
                Label="Vælg lokation" 
                Type="select" 
                @bind-Value="selectedLocationId" 
                DefaultOption="Vælg ønskede lokation for at slette">
                @foreach (var location in locationsList)
                {
                    <option value="@location.Id">@location.Name</option>
                }
            </FormInput>
            <div class="form-group" style="margin-top: 10px">
                <button type="button" class="btn btn-danger" style="width: 100%;" @onclick="HandleDeleteLocation" disabled="@(selectedLocationId == 0)">
                    Slet lokation
                </button>
            </div>
        </div>
    </div>
</EditForm>

<ErrorDisplay Message="@errorMessage" />

@code {
    private Location locationModel = new() { Id = 0, Name = string.Empty };
    private string errorMessage = string.Empty;
    private IEnumerable<Location> locationsList = Array.Empty<Location>();
    private int selectedLocationId;

    [Parameter]
    public EventCallback OnLocationCreated { get; set; }

    protected override async Task OnInitializedAsync() => 
        await RefreshLocations();

    private async Task RefreshLocations() => 
        locationsList = await LocationService.GetAllLocationsAsync();

    private async Task HandleDeleteLocation()
    {
        Console.WriteLine($"Selected Location ID: {selectedLocationId}");
        if (selectedLocationId == 0) return;

        try
        {
            if (await LocationService.DeleteLocationAsync(selectedLocationId))
            {
                await RefreshLocations();
                selectedLocationId = 0;
                await OnLocationCreated.InvokeAsync();
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Failed to delete location. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while deleting: {ex.Message}";
        }
    }

    private async Task HandleCreateLocation()
    {
        try 
        {
            if (await LocationService.CreateLocationAsync(locationModel))
            {
                locationModel = new() { Id = 0, Name = string.Empty };
                await OnLocationCreated.InvokeAsync();
                await RefreshLocations();
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Failed to create location. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
