@using core.Models
@using webapp.Service
@using webapp.Components.Shared
@using webapp.Service.LoginService
@inject ILocationService LocationService
@inject ILoginService LoginService

@if (currentUser?.Roles.Contains(UserRole.Administrator) == true)
{
    <EditForm Model="@locationModel" OnValidSubmit="HandleCreateLocation" class="card">
        <h3>Lokation adminstration</h3>

        <div class="row">
            <div class="col-md-6">
                <h4>Opret Lokation</h4>
                <FormInput TValue="string"
                           Id="locationName"
                           Label="Lokation navn"
                           @bind-Value="locationModel.Name"
                           Placeholder="Navngiv lokationens navn"/>
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Opret Location</button>
                </div>
            </div>

            <div class="col-md-6">
                <h4>Slet Location</h4>
                <FormInput TValue="int"
                           Id="locationDelete"
                           Label="Vælg lokation"
                           Type="select"
                           @bind-Value="selectedLocationId"
                           DefaultOption="Vælg ønskede lokation for at slette">
                    @foreach (var location in locationsList)
                    {
                        <option value="@location.Id">@location.Name</option>
                    }
                </FormInput>
                <div class="form-group">
                    <button type="button"
                            class="btn btn-danger"
                            @onclick="HandleDeleteLocation"
                            disabled="@(selectedLocationId == 0)">
                        Slet lokation
                    </button>
                </div>
            </div>
        </div>
    </EditForm>

    <ErrorDisplay Message="@errorMessage"/>

@code {
    private Location locationModel = new() { Id = 0, Name = string.Empty };
    private string errorMessage = string.Empty;
    private IEnumerable<Location> locationsList = Array.Empty<Location>();
    private int selectedLocationId;
    private User? currentUser;

    [Parameter]
    public EventCallback OnLocationCreated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentUser = await LoginService.GetCurrentUser();
        await RefreshLocations();
    }

    private async Task RefreshLocations() => 
        locationsList = await LocationService.GetAllLocationsAsync();

    private async Task HandleDeleteLocation()
    {
        Console.WriteLine($"Selected Location ID: {selectedLocationId}");
        if (selectedLocationId == 0) return;

        try
        {
            if (await LocationService.DeleteLocationAsync(selectedLocationId))
            {
                await RefreshLocations();
                selectedLocationId = 0;
                await OnLocationCreated.InvokeAsync();
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Failed to delete location. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while deleting: {ex.Message}";
        }
    }

    private async Task HandleCreateLocation()
    {
        try 
        {
            if (await LocationService.CreateLocationAsync(locationModel))
            {
                locationModel = new() { Id = 0, Name = string.Empty };
                await OnLocationCreated.InvokeAsync();
                await RefreshLocations();
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Failed to create location. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}

}
