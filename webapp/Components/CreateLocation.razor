@using core.Models
@using webapp.Service
@using webapp.Components.Shared
@inject ILocationService LocationService

<h3>Location Management</h3>

<EditForm Model="@locationModel" OnValidSubmit="HandleCreateLocation" class="card location-card p-3">
    <div class="row">
        <div class="col-md-6">
            <h4>Create Location</h4>
            <FormInput TValue="string"
                Id="locationName" 
                Label="Location Name" 
                Type="text" 
                @bind-Value="locationModel.Name" 
                Placeholder="Enter location name" />
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Create Location</button>
            </div>
        </div>

        <div class="col-md-6">
            <h4>Delete Location</h4>
            <FormInput TValue="int"
                Id="locationDelete" 
                Label="Select Location" 
                Type="select" 
                @bind-Value="selectedLocationId" 
                DefaultOption="Select a location to delete...">
                @foreach (var location in locationsList)
                {
                    <option value="@location.Id">@location.Name</option>
                }
            </FormInput>
            <div class="form-group">
                <button type="button" class="btn btn-danger" @onclick="HandleDeleteLocation" disabled="@(selectedLocationId == 0)">
                    Delete Selected Location
                </button>
            </div>
        </div>
    </div>
</EditForm>

<ErrorDisplay Message="@errorMessage" />

@code {
    private Location locationModel = new() { Id = 0, Name = string.Empty };
    private string errorMessage = string.Empty;
    private IEnumerable<Location> locationsList = Array.Empty<Location>();
    private int selectedLocationId;

    [Parameter]
    public EventCallback OnLocationCreated { get; set; }

    protected override async Task OnInitializedAsync() => 
        await RefreshLocations();

    private async Task RefreshLocations() => 
        locationsList = await LocationService.GetAllLocationsAsync();

    private async Task HandleDeleteLocation()
    {
        Console.WriteLine($"Selected Location ID: {selectedLocationId}");
        if (selectedLocationId == 0) return;

        try
        {
            if (await LocationService.DeleteLocationAsync(selectedLocationId))
            {
                await RefreshLocations();
                selectedLocationId = 0;
                await OnLocationCreated.InvokeAsync();
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Failed to delete location. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred while deleting: {ex.Message}";
        }
    }

    private async Task HandleCreateLocation()
    {
        try 
        {
            if (await LocationService.CreateLocationAsync(locationModel))
            {
                locationModel = new() { Id = 0, Name = string.Empty };
                await OnLocationCreated.InvokeAsync();
                await RefreshLocations();
                errorMessage = string.Empty;
            }
            else
            {
                errorMessage = "Failed to create location. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
