@page "/edittask/{taskid}"
@using webapp.Service
@using webapp.Components.Create
@inject ITaskService taskservice
@inject IUserService userservice

<h3>Redigere opgave</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
<div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="UpdateTaskItem" OnValidSubmit="UpdateTask" class="card task-card" style="max-width: 800px; margin: 0 auto;">
    <div class="form-group">
        <label for="TaskTitle">Opgave Titel</label>
        <InputText id="TaskTitle" @bind-Value="UpdateTaskItem.Title" class="form-control" placeholder="Indtast opgave titel" />
    </div>

    <div class="form-group">
        <label for="TaskDate">Dato</label>
        <InputDate id="TaskDate" @bind-Value="UpdateTaskItem.Date" TValue="DateTime" class="form-control" />
    </div>

    <div class="form-group">
        <label for="StartTime">Starttidspunkt</label>
        <FormInput TValue="TimeOnly" Type="time" Id="StartTime" @bind-Value="UpdateTaskItem.StartTime" />
    </div>

    <div class="form-group">
        <label for="EndTime">Sluttidspunkt</label>
        <FormInput TValue="TimeOnly" Type="time" Id="EndTime" @bind-Value="UpdateTaskItem.EndTime" />
    </div>

    <button type="submit" class="btn btn-primary">Opdater Opgave</button>
</EditForm>

@code {
private TaskItem UpdateTaskItem { get; set; } = new TaskItem();
private string? ErrorMessage { get; set; }

[Parameter] public string? taskid { get; set; }

private async Task UpdateTask()
{
if (UpdateTaskItem.StartTime >= UpdateTaskItem.EndTime)
{
ErrorMessage = "Starttidspunkt skal være før sluttidspunkt.";
return;
}

// Add logic to update the task.
}
}