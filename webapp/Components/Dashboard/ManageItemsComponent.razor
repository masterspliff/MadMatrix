@using core.Models
@using webapp.Service
@using webapp.Components.Edit
@inject ITaskService TaskService
@inject IEventService EventService

<div class="manage-container">
    <h2 class="text-2xl font-bold mb-4">Administrer Opgaver og events</h2>

    <div class="table-container">
        <table class="custom-table">
    <thead>
        <tr>
            <th>
                Type
                <select class="form-select form-select-sm d-inline-block w-auto ms-2" @bind="SelectedFilter">
                    <option value="all">Alle</option>
                    <option value="task">Opgaver</option>
                    <option value="event">Events</option>
                </select>
            </th>
            <th>
                Titel
                <input type="text" 
                       class="form-control form-control-sm d-inline-block w-auto ms-2" 
                       placeholder="S√∏g efter titel..." 
                       @bind="SearchTerm" 
                       @bind:event="oninput" />
            </th>
            <th>
                Dato
                <select class="form-select form-select-sm d-inline-block w-auto ms-2" @bind="DateFilter">
                    <option value="all">Alle datoer</option>
                    <option value="today">I dag</option>
                    <option value="week">Denne uge</option>
                    <option value="month">Denne m√•ned</option>
                </select>
            </th>
            <th>Handling</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in GetCombinedItems())
        {
            <tr>
                <td>
                    <span class="status-badge @(item.IsEvent ? "status-event" : "status-task")">
                        @item.Type
                    </span>
                </td>
                <td>@item.Title</td>
                <td>@(item.Date.ToString("dd/MM/yyyy"))</td>
                <td class="action-buttons">
                    <button class="btn-edit" data-bs-toggle="modal" data-bs-target="#editModal" @onclick="() => ShowEditDialog(item)">
                        ‚úèÔ∏è Rediger
                    </button>
                    <button class="btn-delete" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="() => ShowDeleteDialog(item)">
                        üóë Slet
                    </button>
                </td>
            </tr>
        }
    </tbody>
        </table>
    </div>
</div>


<ModalWrapperComponent ModalId="deleteModal" ModalSize="modal-dialog" ShowFooter="false">
    <div class="p-3">
        <h5 class="modal-title mb-3">Er du sikker?</h5>
        <p>
            Denne handling kan ikke fortrydes. Dette vil permanent slette 
            "@SelectedItem?.Type.ToLower()"en "@SelectedItem?.Title".
        </p>
        <div class="mt-4 text-end">
            <button class="btn btn-secondary" data-bs-dismiss="modal">Annuller</button>
            <button class="btn btn-danger ms-2" @onclick="DeleteSelectedItem" data-bs-dismiss="modal">Slet</button>
        </div>
    </div>
</ModalWrapperComponent>

<ModalWrapperComponent ModalId="editModal" ModalSize="modal-dialog" ShowFooter="false">
    @if (SelectedItem != null)
    {
        @if (SelectedItem.Value.IsEvent)
        {
            <EditEventComponent Id="@SelectedItem.Value.Id" OnSaveCompleted="RefreshData" />
        }
        else
        {
            <EditTaskComponent TaskId="@SelectedItem.Value.Id" OnSaveCompleted="RefreshData" />
        }
    }
</ModalWrapperComponent>

@code {
    private List<TaskItem> Tasks { get; set; } = new();
    private List<TaskEvent> Events { get; set; } = new();
    private (int Id, string Type, string Title, DateTime Date, bool IsEvent)? SelectedItem;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        var tasksResult = await TaskService.LoadAllTask();
        Tasks = tasksResult.ToList();

        var eventsResult = await EventService.GetAllEventsAsync();
        Events = eventsResult.ToList();
    }

    private string SearchTerm { get; set; } = "";
    private string SelectedFilter { get; set; } = "all";
    private string DateFilter { get; set; } = "all";

    private List<(int Id, string Type, string Title, DateTime Date, bool IsEvent)> GetCombinedItems()
    {
        var items = new List<(int Id, string Type, string Title, DateTime Date, bool IsEvent)>();

        // Add tasks
        items.AddRange(Tasks.Select(t => (
            t.Id,
            Type: "Opgave",
            t.Title,
            t.Date,
            IsEvent: false
        )));

        // Add events
        items.AddRange(Events.Select(e => (
            e.Id,
            Type: "Event",
            e.Title,
            Date: e.DateForEvent,
            IsEvent: true
        )));

        // Apply type filter
        items = SelectedFilter switch
        {
            "task" => items.Where(i => !i.IsEvent).ToList(),
            "event" => items.Where(i => i.IsEvent).ToList(),
            _ => items
        };

        // Apply date filter
        items = DateFilter switch
        {
            "today" => items.Where(i => i.Date.Date == DateTime.Today).ToList(),
            "week" => items.Where(i => i.Date.Date >= DateTime.Today && 
                                     i.Date.Date <= DateTime.Today.AddDays(7)).ToList(),
            "month" => items.Where(i => i.Date.Month == DateTime.Today.Month && 
                                      i.Date.Year == DateTime.Today.Year).ToList(),
            _ => items
        };

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(SearchTerm))
        {
            items = items.Where(i => i.Title.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        return items.OrderByDescending(i => i.Date).ToList();
    }

    private void ShowDeleteDialog((int Id, string Type, string Title, DateTime Date, bool IsEvent) item)
    {
        SelectedItem = item;
    }

    private void ShowEditDialog((int Id, string Type, string Title, DateTime Date, bool IsEvent) item)
    {
        SelectedItem = item;
    }

    private async Task DeleteSelectedItem()
    {
        if (SelectedItem == null) return;

        try
        {
            bool success;
            if (SelectedItem.Value.IsEvent)
            {
                success = await EventService.DeleteEventAsync(SelectedItem.Value.Id);
            }
            else
            {
                success = await TaskService.DeleteTaskAsync(SelectedItem.Value.Id);
            }

            if (success)
            {
                await RefreshData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting item: {ex.Message}");
        }
    }
}
