@using core.Models
@using webapp.Service
@using webapp.Components.Edit
@inject ITaskService TaskService
@inject IEventService EventService

@* Main container for the management interface *@
<div class="manage-container" style="margin-top: 50px;">
    <h2 class="text-2xl font-bold mb-4">Administrer Opgaver og Events</h2>

    @* Table to display tasks and events *@
    <div class="table-container">
        <table class="custom-table">
            @* Table header *@
            <thead>
                <tr>
                    <th style="padding-left: 30px">Type</th>
                    <th>Titel</th>
                    <th>Status</th>
                    <th>Dato</th>
                    <th style="text-align: right; padding-right: 30px">Handling</th>
                </tr>
            </thead>
            
            @* Table body *@
            <tbody>
                @* Calculate items to show on current page *@
                @{
                    var startIndex = (CurrentPage - 1) * PageSize;
                    var itemsToShow = Items
                        .OrderByDescending(i => i.Date)
                        .Skip(startIndex)
                        .Take(PageSize);
                }

                @foreach (var item in itemsToShow)
                {
                    @* Display a single row for each item *@
                    <tr>
                        @* Type column with badge *@
                        <td>
                            <span class="badge @(item.IsEvent ? "bg-info" : "bg-warning")">
                                @item.Type
                            </span>
                        </td>

                        @* Title column *@
                        <td>@item.Title</td>

                        @* Status column *@
                        <td>
                            @if (!item.IsEvent)
                            {
                                <span class="badge @(item.Status switch {
                                    core.Models.TaskStatus.NotStarted => "bg-secondary",
                                    core.Models.TaskStatus.InProgress => "bg-primary",
                                    core.Models.TaskStatus.Completed => "bg-success",
                                    _ => "bg-secondary"
                                })">
                                    @item.Status
                                </span>
                            }
                        </td>

                        @* Date column *@
                        <td>@item.Date.ToString("dd/MM/yyyy")</td>

                        @* Action buttons column *@
                        <td class="action-buttons">
                            <button class="btn-edit" 
                                    data-bs-toggle="modal" 
                                    data-bs-target="#editModal" 
                                    @onclick="() => ShowEditDialog(item)">
                                ‚úèÔ∏è Rediger
                            </button>
                            <button class="btn-delete" 
                                    data-bs-toggle="modal" 
                                    data-bs-target="#deleteModal" 
                                    @onclick="() => ShowDeleteDialog(item)">
                                üóë
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination Controls -->
        <div class="mt-3 d-flex justify-content-between">
            <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(CurrentPage == 1)">Forrige</button>
            <span>Side @CurrentPage af @TotalPages</span>
            <button class="btn btn-secondary" @onclick="NextPage" disabled="@(CurrentPage == TotalPages)">N√¶ste</button>
        </div>
    </div>
</div>

<ModalWrapperComponent ModalId="deleteModal" ModalSize="modal-dialog" ShowFooter="false">
    <div class="p-3">
        <h5 class="modal-title mb-3">Er du sikker?</h5>
        <p>
            Denne handling kan ikke fortrydes. Dette vil permanent slette 
            "@SelectedItem?.Type.ToLower()"en "@SelectedItem?.Title".
        </p>
        <div class="mt-4 text-end">
            <button class="btn btn-secondary" data-bs-dismiss="modal">Annuller</button>
            <button class="btn btn-danger ms-2" @onclick="DeleteSelectedItem" data-bs-dismiss="modal">Slet</button>
        </div>
    </div>
</ModalWrapperComponent>

<ModalWrapperComponent ModalId="editModal" ModalSize="modal-xl" ShowFooter="false">
    @if (SelectedItem != null)
    {
        @if (SelectedItem.IsEvent)
        {
            <EditEventComponent Id="@SelectedItem.Id" OnSaveCompleted="LoadAllItemsFromServer" />
        }
        else
        {
            <EditTaskComponent TaskId="@SelectedItem.Id" OnSaveCompleted="LoadAllItemsFromServer" />
        }
    }
</ModalWrapperComponent>

@code {
    // Define a custom type for our items to make the code more readable
    private class DisplayItem
    {
        public int Id { get; set; }
        public string Type { get; set; }
        public string Title { get; set; }
        public DateTime Date { get; set; }
        public bool IsEvent { get; set; }
        public core.Models.TaskStatus? Status { get; set; }
    }

    /// <summary>
    /// Combined collection of all tasks and events in the system,
    /// converted to DisplayItem format for unified display
    /// </summary>
    private List<DisplayItem> Items { get; set; } = new();

    /// <summary>
    /// Currently selected item for editing or deletion operations.
    /// Null when no item is selected.
    /// </summary>
    private DisplayItem? SelectedItem { get; set; }

    /// <summary>
    /// Current page number in the pagination, starting from 1
    /// </summary>
    private int CurrentPage { get; set; } = 1;

    /// <summary>
    /// Number of items to display per page
    /// </summary>
    private int PageSize { get; set; } = 10;

    /// <summary>
    /// Total number of pages based on Items count and PageSize
    /// </summary>
    private int TotalPages { get; set; } = 1;

    /// <summary>
    /// Initializes the component by loading all items from the server
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadAllItemsFromServer();
    }

    /// <summary>
    /// Fetches all tasks and events from their respective services and combines them into a unified display format
    /// </summary>
    /// <returns>A task representing the asynchronous operation</returns>
    private async Task LoadAllItemsFromServer()
    {
        try
        {
            // Get tasks and events from their respective services
            var tasks = await TaskService.LoadAllTask();
            var events = await EventService.GetAllEventsAsync();

            // Convert tasks to our display format
            var taskItems = tasks.Select(task => new DisplayItem
            {
                Id = task.Id,
                Type = "Opgave",
                Title = task.Title,
                Date = task.Date,
                IsEvent = false,
                Status = task.Status
            });

            // Convert events to our display format
            var eventItems = events.Select(evt => new DisplayItem
            {
                Id = evt.Id,
                Type = "Event",
                Title = evt.Title,
                Date = evt.DateForEvent,
                IsEvent = true,
                Status = null
            });

            // Combine both lists
            Items = taskItems.Concat(eventItems).ToList();

            // Update pagination
            UpdatePagination();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading items: {ex.Message}");
            Items = new List<DisplayItem>();
        }
    }

    /// <summary>
    /// Calculates the total number of pages based on item count and page size
    /// Updates CurrentPage if it exceeds the new total
    /// </summary>
    // Calculate total pages and ensure current page is valid
    private void UpdatePagination()
    {
        // Calculate how many pages we need
        int totalItems = Items.Count;
        TotalPages = (int)Math.Ceiling((double)totalItems / PageSize);

        // Make sure we're not on a page that doesn't exist
        if (CurrentPage > TotalPages && TotalPages > 0)
        {
            CurrentPage = TotalPages;
        }
        else if (CurrentPage < 1)
        {
            CurrentPage = 1;
        }
    }

    /// <summary>
    /// Navigates to the next page of items if available
    /// </summary>
    private void GoToNextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
        }
    }

    /// <summary>
    /// Navigates to the previous page of items if available
    /// </summary>
    private void GoToPreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    /// <summary>
    /// Prepares and shows the delete confirmation dialog for the selected item
    /// </summary>
    /// <param name="item">The item to be potentially deleted</param>
    private void ShowDeleteDialog(DisplayItem item)
    {
        SelectedItem = item;
    }

    /// <summary>
    /// Prepares and shows the edit dialog for the selected item
    /// </summary>
    /// <param name="item">The item to be edited</param>
    private void ShowEditDialog(DisplayItem item)
    {
        SelectedItem = item;
    }

    /// <summary>
    /// Deletes the currently selected item from the system
    /// </summary>
    /// <returns>A task representing the asynchronous delete operation</returns>
    private async Task DeleteSelectedItem()
    {
        // Make sure we have an item selected
        if (SelectedItem == null) return;

        try
        {
            // Delete either an event or a task
            bool deleteSuccessful;
            if (SelectedItem.IsEvent)
            {
                deleteSuccessful = await EventService.DeleteEventAsync(SelectedItem.Id);
            }
            else
            {
                deleteSuccessful = await TaskService.DeleteTaskAsync(SelectedItem.Id);
            }

            // If deletion was successful, refresh the list
            if (deleteSuccessful)
            {
                await LoadAllItemsFromServer();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting item: {ex.Message}");
        }
        finally
        {
            // Clear the selected item
            SelectedItem = null;
        }
    }

    /// <summary>
    /// Navigates to the previous page if available
    /// </summary>
    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    /// <summary>
    /// Navigates to the next page if available
    /// </summary>
    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
        }
    }

}
