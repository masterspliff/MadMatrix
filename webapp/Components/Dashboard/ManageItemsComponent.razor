@using core.Models
@using webapp.Service
@using webapp.Components.Edit
@inject ITaskService TaskService
@inject IEventService EventService

<div style="margin-top: 50px;" class="manage-container">
    <h2 class="text-2xl font-bold mb-4">Administrer Opgaver og Events</h2>

    <div class="table-container">
        <table class="custom-table">
            <thead>
                <tr>
                    <th style="padding-left: 30px">Type</th>
                    <th>Titel</th>
                    <th>Dato</th>
                    <th style="text-align: right; padding-right: 30px">Handling</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Items
                                     .OrderByDescending(i => i.Date)
                                     .Skip((CurrentPage - 1) * PageSize)
                                     .Take(PageSize))
                {
                    <tr>
                        <td>
                            <span class="status-badge @(item.IsEvent ? "status-event" : "status-task")">
                                @item.Type
                            </span>
                        </td>
                        <td>@item.Title</td>
                        <td>@(item.Date.ToString("dd/MM/yyyy"))</td>
                        <td class="action-buttons">
                            <button class="btn-edit" data-bs-toggle="modal" data-bs-target="#editModal" @onclick="() => ShowEditDialog(item)">
                                ‚úèÔ∏è Rediger
                            </button>
                            <button class="btn-delete" data-bs-toggle="modal" data-bs-target="#deleteModal" @onclick="() => ShowDeleteDialog(item)">
                                üóë
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination Controls -->
        <div class="mt-3 d-flex justify-content-between">
            <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@(CurrentPage == 1)">Forrige</button>
            <span>Side @CurrentPage af @TotalPages</span>
            <button class="btn btn-secondary" @onclick="NextPage" disabled="@(CurrentPage == TotalPages)">N√¶ste</button>
        </div>
    </div>
</div>

<ModalWrapperComponent ModalId="deleteModal" ModalSize="modal-dialog" ShowFooter="false">
    <div class="p-3">
        <h5 class="modal-title mb-3">Er du sikker?</h5>
        <p>
            Denne handling kan ikke fortrydes. Dette vil permanent slette 
            "@SelectedItem?.Type.ToLower()"en "@SelectedItem?.Title".
        </p>
        <div class="mt-4 text-end">
            <button class="btn btn-secondary" data-bs-dismiss="modal">Annuller</button>
            <button class="btn btn-danger ms-2" @onclick="DeleteSelectedItem" data-bs-dismiss="modal">Slet</button>
        </div>
    </div>
</ModalWrapperComponent>

<ModalWrapperComponent ModalId="editModal" ModalSize="modal-xl" ShowFooter="false">
    @if (SelectedItem != null)
    {
        @if (SelectedItem.Value.IsEvent)
        {
            <EditEventComponent Id="@SelectedItem.Value.Id" OnSaveCompleted="RefreshData" />
        }
        else
        {
            <EditTaskComponent TaskId="@SelectedItem.Value.Id" OnSaveCompleted="RefreshData" />
        }
    }
</ModalWrapperComponent>

@code {
    private List<(int Id, string Type, string Title, DateTime Date, bool IsEvent)> Items { get; set; } = new();
    private (int Id, string Type, string Title, DateTime Date, bool IsEvent)? SelectedItem;

    private int CurrentPage { get; set; } = 1;
    private int PageSize { get; set; } = 10;
    private int TotalPages { get; set; } = 1;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        var tasks = await TaskService.LoadAllTask();
        var events = await EventService.GetAllEventsAsync();

        Items = tasks.Select(t => (t.Id, "Opgave", t.Title, t.Date, false))
                     .Concat(events.Select(e => (e.Id, "Event", e.Title, e.DateForEvent, true)))
                     .ToList();

        CalculateTotalPages();
    }

    private void CalculateTotalPages()
    {
        int totalItems = Items.Count;
        TotalPages = (int)Math.Ceiling((double)totalItems / PageSize);
        if (CurrentPage > TotalPages && TotalPages > 0)
        {
            CurrentPage = TotalPages;
        }
    }

    private void ShowDeleteDialog((int Id, string Type, string Title, DateTime Date, bool IsEvent) item)
    {
        SelectedItem = item;
    }

    private void ShowEditDialog((int Id, string Type, string Title, DateTime Date, bool IsEvent) item)
    {
        SelectedItem = item;
    }

    private async Task DeleteSelectedItem()
    {
        if (SelectedItem == null) return;

        try
        {
            bool success;
            if (SelectedItem.Value.IsEvent)
            {
                success = await EventService.DeleteEventAsync(SelectedItem.Value.Id);
            }
            else
            {
                success = await TaskService.DeleteTaskAsync(SelectedItem.Value.Id);
            }

            if (success)
            {
                await RefreshData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting item: {ex.Message}");
        }
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1)
        {
            CurrentPage--;
        }
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages)
        {
            CurrentPage++;
        }
    }
}