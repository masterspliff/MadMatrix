@using webapp.Service.LoginService
@inject ILoginService loginService
@inject NavigationManager navManager

    @if (isLoggedIn)
    {
    }
    else
    {
        @if (!string.IsNullOrEmpty(errorText))
        {
            <div class="alert alert-danger" role="alert">
                @errorText
            </div>
        }
        <div style="justify-content: center; align-items: center; width: 100%; box-shadow: none">                                                                                                                                                                                                                                                                                  
            <div class="card" style="max-width: 50%; margin: auto; border: none; display: block; margin-top: 10%; ">   
                <h3 class="text-center mb-4">Login</h3>
            
                <div class="mb-3">
                    <label for="username" class="form-label">Email:</label>
                    <InputText id="username" @bind-Value="username" 
                               placeholder="Enter your email..." class="form-control" />
                </div>
            
                <div class="mb-3">
                    <label for="password" class="form-label">Password:</label>
                    <InputText id="password" @bind-Value="password" type="password"
                               placeholder="Enter your password..." class="form-control" />
                </div>

                <button @onclick="OnClickLogin" class="btn btn-primary w-100" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="ms-2">Loading...</span>
                    }
                    else
                    {
                        <span>Login</span>
                    }
                </button>
            </div>
        </div>
    }

@code {
    /// <summary>
    /// The username/email entered by the user
    /// </summary>
    private string username = "";

    /// <summary>
    /// The password entered by the user
    /// </summary>
    private string password = "";

    /// <summary>
    /// Error message to display when login fails
    /// </summary>
    private string errorText = "";

    /// <summary>
    /// Indicates whether a login attempt is in progress
    /// Used to show loading spinner and disable the login button
    /// </summary>
    private bool isLoading = false;

    /// <summary>
    /// Tracks whether a user is currently logged in
    /// </summary>
    private bool isLoggedIn = false;

    /// <summary>
    /// The page to redirect to after successful login
    /// Defaults to the dashboard page
    /// </summary>
    [Parameter]
    public string Target { get; set; } = "dashboard";

    /// <summary>
    /// Initializes the component by checking if user is already logged in
    /// </summary>
    /// <returns>A task representing the asynchronous operation</returns>
    protected override async Task OnInitializedAsync()
    {
        isLoggedIn = await loginService.IsLoggedIn();
    }

    /// <summary>
    /// Handles the logout process
    /// Clears the authentication state and updates the UI
    /// </summary>
    /// <returns>A task representing the asynchronous operation</returns>
    private async Task HandleLogout()
    {
        await loginService.Logout();
        await loginService.NotifyAuthStateChanged();
        isLoggedIn = false;
        StateHasChanged();
    }

    /// <summary>
    /// Handles the login button click
    /// Validates inputs, attempts login, and handles success/failure
    /// </summary>
    /// <returns>
    /// A task representing the asynchronous operation.
    /// On success, redirects to Target page.
    /// On failure, displays error message.
    /// </returns>
    private async Task OnClickLogin()
    {
        try
        {
            isLoading = true;
            errorText = "";

            if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(password))
            {
                errorText = "Please enter both email and password";
                return;
            }

            var success = await loginService.Login(username, password);
            if (success)
            {
                isLoggedIn = true;
                await loginService.NotifyAuthStateChanged();
                var user = await loginService.GetCurrentUser();
                if (user != null)
                {
                    // This is only for debugging and to verify the login
                    Console.WriteLine($"User logged in successfully:");
                    Console.WriteLine($"ID: {user.Id}");
                    Console.WriteLine($"Name: {user.FirstName} {user.LastName}");
                    Console.WriteLine($"Email: {user.Email}");
                    Console.WriteLine($"Phone: {user.PhoneNumber}");
                    Console.WriteLine($"Email Notifications: {user.EmailNotification}");
                    Console.WriteLine($"Roles: {string.Join(", ", user.Roles)}");
                    Console.WriteLine($"Competencies: {string.Join(", ", user.Competencies)}");
                }
                navManager.NavigateTo(Target, true); // true forces page refresh
            }
            else
            {
                errorText = "Invalid email or password";
            }
        }
        catch (Exception ex)
        {
            errorText = "An error occurred during login. Please try again.";
            Console.WriteLine($"LoginPage error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
