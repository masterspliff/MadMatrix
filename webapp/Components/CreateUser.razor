@using core.Models 
@using webapp.Service 
@inject IUserService UserService 
@inject NavigationManager NavigationManager

<!-- Form for creating a new user -->

<div class="container mt-4">
    <h3>Opret ny bruger</h3>
    <EditForm Model="@registerModel" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="mb-3">
            <label for="firstName" class="form-label">Fornavn</label>
            <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" />
            <ValidationMessage For="@(() => registerModel.FirstName)" />
        </div>
        <div class="mb-3">
            <label for="lastName" class="form-label">Efternavn</label>
            <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" />
            <ValidationMessage For="@(() => registerModel.LastName)" />
        </div>
        <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
            <ValidationMessage For="@(() => registerModel.Email)" />
        </div>
        <div class="mb-3">
            <label for="password" class="form-label">Adgangskode</label>
            <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
            <ValidationMessage For="@(() => registerModel.Password)" />
        </div>
        <div class="mb-3">
            <label for="phoneNumber" class="form-label">Telefonnummer</label>
            <InputText id="phoneNumber" class="form-control" @bind-Value="registerModel.PhoneNumber" />
            <ValidationMessage For="@(() => registerModel.PhoneNumber)" />
        </div>
        <div class="mb-3">
            <label class="form-label">Kompetencer</label>
            @{
            // Generate checkboxes for all enum values of Competency                                                                                                                                                                                                                                                                                                           
            var competencies = Enum.GetValues(typeof(Competency));
            for (int i = 0; i < competencies.Length; i++)
            {
            var competency = competencies.GetValue(i)!;
            var index = i; // Capture index for binding checkbox state                                                                                                                                                                                                                                                                                                     
            <div class="Compentency-checkbox">
                <!-- Checkbox for each competency -->
                <InputCheckbox class="form-check-input"
                               @bind-Value="competencyValues[index]"
                               id="@($"competency_{competency}")"/>
                <label class="form-check-label" for="@($"competency_{competency}")">
                    @competency <!-- Display competency name -->
                </label>
            </div>
            }
            }
        </div>
        <button type="submit" class="btn btn-primary" style="width: 100%; margin-top: 20px; margin-bottom: 20px">Opret konto</button>
    </EditForm>
    
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }
</div>

@code {
    // Model to hold the form input values
    private RegisterDto registerModel = new();

    // Variable to store error messages
    private string errorMessage = string.Empty;

    // Boolean array to track which competencies are selected
    private bool[] competencyValues = new bool[Enum.GetValues(typeof(Competency)).Length];

    // Method to handle form submission
    private async Task HandleValidSubmit()
    {
        try
        {
        // Convert selected competencies (from checkboxes) to a list in the RegisterDto
        registerModel.Competencies = new List<Competency>();
        var competencies = Enum.GetValues(typeof(Competency));
        for (int i = 0; i < competencyValues.Length; i++)
        {
            if (competencyValues[i])
            {
                // Add the competency to the list if the checkbox is checked
                registerModel.Competencies.Add((Competency)competencies.GetValue(i)!);
            }
            }
        // Register the user via the service layer
            var user = await UserService.RegisterUser(registerModel);

        // Navigate to the dashboard page on success
            NavigationManager.NavigateTo("/dashboard");
            }
        catch (Exception ex)
        {
        // Handle and display any errors during registration
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }   
}
