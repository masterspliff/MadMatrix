@page "/tasks"
@page "/tasks/edit/{Id:int}"
@using TaskStatus = core.Models.TaskStatus
@using webapp.Components.Shared
@using webapp.Service
@using webapp.Service.LoginService
@inject ITaskService TaskService
@inject IUserService UserService
@inject ILoginService LoginService


@if (currentUser?.Roles.Contains(UserRole.Administrator) == true)
{
    <EditForm Model="NewTask" OnValidSubmit="CommitTask" class="card announcement-card" style="max-width: 800px; margin: 5px auto; border: none;">
        <h4 style="margin: 10px 30px">@(Id.HasValue ? "Rediger Opgave" : "Opret Opgave")</h4>

        <FormInput TValue="string"
                   Id="TaskTitle"
                   Label="Opgave Titel"
                   @bind-Value="NewTask.Title"
                   Placeholder="Indtast opgave titel"/>

        <FormInput TValue="string"
                   Id="TaskDescription"
                   Label="Beskrivelse"
                   @bind-Value="NewTask.Description"
                   Placeholder="Indtast beskrivelse"/>

        <FormInput TValue="DateTime"
                   Id="StartDate"
                   Label="Startdato"
                   Type="date"
                   @bind-Value="NewTask.StartDate"/>

        <FormInput TValue="DateTime"
                   Id="EndDate"
                   Label="Slutdato"
                   Type="date"
                   @bind-Value="NewTask.EndDate"/>

        <EnumSelector TEnum="TaskStatus"
                      Label="Status"
                      @bind-Value="NewTask.Status"
                      DefaultOption="VÃ¦lg status"/>

        <UserSelector Label="Tildel Medarbejdere"
                      SelectedUsersChanged="@(ids => NewTask.AssignedToIds = ids)"/>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Opret Opgave</button>
        </div>
    </EditForm>

@code {
    private TaskItem NewTask { get; set; } = new() { AssignedToIds = new List<int>() };
    private User? currentUser;
    
    [Parameter]
    public EventCallback OnTaskCreated { get; set; }

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentUser = await LoginService.GetCurrentUser();
        
        if (Id.HasValue)
        {
            var task = await TaskService.GetTaskAsync(Id.Value);
            if (task != null)
            {
                NewTask = task;
            }
        }
    }

    private async Task CommitTask()
    {
        try
        {
            bool isSuccess;
            if (Id.HasValue)
            {
                isSuccess = await TaskService.EditTaskAsync(Id.Value, NewTask);
            }
            else
            {
                isSuccess = await TaskService.CreateTaskAsync(NewTask);
            }

            if (isSuccess)
            {
                NewTask = new() { AssignedToIds = new List<int>() }; // Reset form with proper initialization
                await OnTaskCreated.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error {(Id.HasValue ? "updating" : "creating")} task: {ex.Message}");
        }
    }
}
}
