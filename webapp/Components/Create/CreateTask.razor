@page "/tasks"
@page "/tasks/edit/{Id:int}"
@using TaskStatus = core.Models.TaskStatus
@using webapp.Service
@using webapp.Service.LoginService
@inject ITaskService TaskService
@inject IUserService UserService
@inject ILoginService LoginService


@if (currentUser?.Roles.Contains(UserRole.Administrator) == true)
{
    <EditForm Model="NewTask" OnValidSubmit="CommitTask" class="card announcement-card" style="max-width: 800px; margin: 5px auto; border: none;">
        <h4 style="margin: 10px 30px">@(Id.HasValue ? "Rediger Opgave" : "Opret Opgave")</h4>

        <FormInput TValue="string"
                   Id="TaskTitle"
                   Label="Opgave Titel"
                   @bind-Value="NewTask.Title"
                   Placeholder="Indtast opgave titel"/>

        <FormInput TValue="string"
                   Id="TaskDescription"
                   Label="Beskrivelse"
                   @bind-Value="NewTask.Description"
                   Placeholder="Indtast beskrivelse"/>

        <FormInput TValue="DateTime"
                   Id="Date"
                   Label="Dato"
                   Type="date"
                   @bind-Value="NewTask.Date"/>

        <FormInput TValue="TimeOnly"
                   Id="StartTime"
                   Label="Starttidspunkt"
                   Type="time"
                   @bind-Value="NewTask.StartTime"/>

        <FormInput TValue="TimeOnly"
                   Id="EndTime"
                   Label="Sluttidspunkt"
                   Type="time"
                   @bind-Value="NewTask.EndTime"/>

        <!-- SET STATUS FOR TASK -->
        <div class="form-group">
            <label class="form-label">Status</label>
            <InputSelect class="form-control" @bind-Value="NewTask.Status">
                <option value="">VÃ¦lg status</option>
                @foreach (var status in Enum.GetValues(typeof(TaskStatus)))
                {
                    <option value="@status">@status</option>
                }
            </InputSelect>
        </div>

        <!-- SELECT WORKERS -->
        <div class="form-group">
            <label>Tildel Medarbejdere</label>
            @if (isLoading)
            {
                <div>Loading users...</div>
            }
            else
            {
                @foreach (var user in _users)
                {
                    <div class="form-check">
                        <input type="checkbox" class="form-check-input"
                               @onchange="@(e => ToggleUserSelection(user.Id))"
                               checked="@(NewTask.AssignedToIds.Contains(user.Id))"
                               id="@($"user_{user.Id}")"/>
                        <label class="form-check-label" for="@($"user_{user.Id}")">
                            @user.FirstName @user.LastName
                        </label>
                    </div>
                }
            }
        </div>

        <div class="form-group">
            <button type="submit" class="btn btn-primary">Opret Opgave</button>
        </div>
    </EditForm>

@code {
    private TaskItem NewTask { get; set; } = new() { AssignedToIds = new List<int>() };
    private User? currentUser;
    private List<User> _users = new();
    private bool isLoading = true;

    
    [Parameter]
    public EventCallback OnTaskCreated { get; set; }

    [Parameter]
    public int? Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            currentUser = await LoginService.GetCurrentUser();
            _users = await UserService.LoadUsers();
            
            if (Id.HasValue)
            {
                var task = await TaskService.GetTaskAsync(Id.Value);
                if (task != null)
                {
                    NewTask = task;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CommitTask()
    {
        try
        {
            bool isSuccess;
            if (Id.HasValue)
            {
                isSuccess = await TaskService.EditTaskAsync(Id.Value, NewTask);
            }
            else
            {
                isSuccess = await TaskService.CreateTaskAsync(NewTask);
            }

            if (isSuccess)
            {
                NewTask = new() { AssignedToIds = new List<int>() }; // Reset form with proper initialization
                await OnTaskCreated.InvokeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error {(Id.HasValue ? "updating" : "creating")} task: {ex.Message}");
        }
    }
    private void ToggleUserSelection(int userId)
    {
        if (NewTask.AssignedToIds.Contains(userId))
        {
            NewTask.AssignedToIds.Remove(userId);
        }
        else
        {
            NewTask.AssignedToIds.Add(userId);
        }
    }
}

}
