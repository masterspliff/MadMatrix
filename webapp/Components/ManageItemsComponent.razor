@page "/manage-items"
@using core.Models
@using webapp.Service
@inject ITaskService TaskService
@inject IEventService EventService
@inject NavigationManager NavigationManager

<h2 class="text-2xl font-bold mb-4">Administrer Opgaver og events</h2>

<table class="table">
    <thead>
        <tr>
            <th>Type</th>
            <th>Titel</th>
            <th>Dato</th>
            <th>Handling</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in GetCombinedItems())
        {
            <tr>
                <td>@item.Type</td>
                <td>@item.Title</td>
                <td>@(item.Date.ToString("yyyy-MM-dd"))</td>
                <td>
                    <button class="btn btn-primary btn-sm me-2" @onclick="() => NavigateToEdit(item)">
                        ‚úèÔ∏è
                    </button>
                    <button class="btn btn-danger btn-sm" @onclick="() => ShowDeleteDialog(item)">
                        üóë
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>


@if (ShowDialog)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Er du sikker?</h5>
                    <button type="button" class="close" aria-label="Close" @onclick="CloseDialog">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>
                        Denne handling kan ikke fortrydes. Dette vil permanent slette 
                        "@SelectedItem?.Type.ToLower()"en "@SelectedItem?.Title".
                    </p>
                </div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" @onclick="CloseDialog">Annuller</button>
                    <button class="btn btn-danger" @onclick="DeleteSelectedItem">Slet</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop show"></div>
}

@code {
    private List<TaskItem> Tasks { get; set; } = new();
    private List<TaskEvent> Events { get; set; } = new();
    private bool ShowDialog = false;
    private bool IsEditDialogVisible = false;
    private Item? SelectedItem;
    private string EditTitle = string.Empty;
    private DateTime EditDate = DateTime.Now;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
    }

    private async Task RefreshData()
    {
        var tasksResult = await TaskService.LoadAllTask();
        Tasks = tasksResult.ToList();
        
        var eventsResult = await EventService.GetAllEventsAsync();
        Events = eventsResult.ToList();
    }

    private List<Item> GetCombinedItems()
    {
        var items = new List<Item>();
        
        // Add tasks
        items.AddRange(Tasks.Select(t => new Item 
        { 
            Id = t.Id,
            Type = "Opgave",
            Title = t.Title,
            Date = t.Date,
            IsEvent = false
        }));
        
        // Add events
        items.AddRange(Events.Select(e => new Item 
        { 
            Id = e.Id,
            Type = "Event",
            Title = e.Title,
            Date = e.DateForEvent,
            IsEvent = true
        }));

        return items.OrderBy(i => i.Date).ToList();
    }

    private void ShowDeleteDialog(Item item)
    {
        SelectedItem = item;
        ShowDialog = true;
    }

    private void CloseDialog()
    {
        ShowDialog = false;
        SelectedItem = null;
    }


    private async Task DeleteSelectedItem()
    {
        if (SelectedItem == null) return;

        try
        {
            bool success;
            if (SelectedItem.IsEvent)
            {
                success = await EventService.DeleteEventAsync(SelectedItem.Id);
            }
            else
            {
                success = await TaskService.DeleteTaskAsync(SelectedItem.Id);
            }

            if (success)
            {
                await RefreshData();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting item: {ex.Message}");
        }
        
        CloseDialog();
    }

    private void NavigateToEdit(Item item)
    {
        var route = item.IsEvent ? $"/events/edit/{item.Id}" : $"/tasks/edit/{item.Id}";
        NavigationManager.NavigateTo(route);
    }


    private class Item
    {
        public int Id { get; set; }
        public string Type { get; set; } = string.Empty;
        public string Title { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public bool IsEvent { get; set; }
    }
}
