@using webapp.Service
@using TaskStatus = core.Models.TaskStatus
@inject IUserService UserService
@inject ITaskService TaskService

    <h3>@Title</h3>
    @if (ShowData == true)
    {
        <p><strong>Status:</strong> @Status</p>
        <p><strong>Start Date:</strong> @StartTime</p>
        <p><strong>End Date:</strong> @EndTime</p>
        <p><strong>Assigned To:</strong></p>
            <div class="assigned-to">
                @foreach (var id in @AssignedTo)
                {
                // component that takes id and handles logic of displaying pfp and other info'
                <UserViewerComponent userId="@id"/>
                }

        </div>
    }
    @if (ShowDescription == true)
    {
        <p><strong>Assigned To:</strong></p>
        <div class="assigned-to">
            @foreach (var id in @AssignedTo)
            {
                // component that takes id and handles logic of displaying pfp and other info'
                <UserViewerComponent userId="@id"/>
            }
        </div>
    <p><strong>Description:</strong>@Description</p>
    
<div>
    <label for="taskStatusDropdown"><strong>Status:</strong></label>
    <select id="taskStatusDropdown" @bind="Status">
        @foreach (var status in Enum.GetValues(typeof(TaskStatus)).Cast<TaskStatus>())
        {
        <option value="@status">@status</option>
        }
    </select>

</div>



@code {
    //Import parameters from the Model(?)
    [Parameter] public int taskId { get; set; }
    [Parameter] public string Title { get; set; }
    [Parameter] public string Description { get; set; }
    [Parameter] public TaskStatus Status { get; set; }
    [Parameter] public DateTime Dato { get; set; }
    [Parameter] public TimeOnly StartTime { get; set; }
    [Parameter] public TimeOnly EndTime { get; set; }
    [Parameter] public List<int> AssignedTo { get; set; }
    [Parameter] public bool? ShowDescription { get; set; } = false;
    [Parameter] public bool? ShowData { get; set; } = false;

    
    
    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        if (Enum.TryParse<TaskStatus>(e.Value?.ToString(), out var newStatus))
        {
            Status = newStatus;
            var success = await TaskService.UpdateTaskStatus(taskId, Status);

            if (success)
            {
                Console.WriteLine($"Task {taskId} status updated to {Status}");
            }
            else
            {
                Console.WriteLine($"Failed to update task {taskId}");
            }
        }
    }


}
    }