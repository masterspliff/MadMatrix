@page "/events"
@using core.Models
@using webapp.Service
@using Location = core.Models.Location
@inject IEventService serviceserver
@inject ILocationService locationService


<h3>Create Event</h3>
<EditForm Model="NewEvent" OnValidSubmit="CreateEventNow" class="card announcement-card">
    <div class="form-group">
        <label for="Title">Titel</label>
        <InputText id="Title" @bind-Value="NewEvent.Title" class="form-control" placeholder="Indtast Titel"/>
    </div>
    <div class="form-group">
        <label for="Date">Dato</label>
        <InputDate id="Date" @bind-Value="NewEvent.DateForEvent" class="form-control"/>
    </div>
    <div class="form-group">
        <label for="Location">Lokation</label>
        
        <InputSelect id="Location" @bind-Value="NewEvent.LocationId" class="form-control">
            <!-- Fetching locations -->
            <option value="">Vælg Lokation</option>
            @foreach (var location in Locations)
            {
                <option value="@location.Id">@location.Name</option>
            }
        </InputSelect>
        
        
    </div>
    <div class="form-group">
        <label for="FoodChoice">Madvalg</label>
        <InputText id="FoodChoice" @bind-Value="NewEvent.FoodChoices" class="form-control" placeholder="Indtast madvalg"/>
    </div>
    <div class="form-group">
        <label for="SpecialRequest">Særlige mad behov</label>
        <InputText id="SpecialRequest" @bind-Value="NewEvent.SpecialRequest" class="form-control" placeholder="Indtast special ønsker til mad"/>
    </div>
    <div class="form-group">
        <label for="ByCustomer">Kunde</label>
        <InputText id="ByCustomer" @bind-Value="NewEvent.ByCustomer" class="form-control" placeholder="Indtast kunde"/>
    </div>
    <div class="form-group">
        <label for="Participant">Deltagere</label>
        <InputNumber id="Participant" @bind-Value="NewEvent.Participants" class="form-control"/>
    </div>
    <div class="form-group">
        <button class="btn btn-primary">Opret Event</button>
    </div>
</EditForm>

@code {
    private TaskEvent NewEvent = new TaskEvent();
    private string errorMessage = string.Empty;

    <!-- Note here -->
    private IEnumerable<core.Models.Location> Locations { get; set; } = Enumerable.Empty<core.Models.Location>();

    protected override async Task OnInitializedAsync()
    {
        Locations = await locationService.GetAllLocationsAsync();
        await base.OnInitializedAsync();
    }

    <!-- Calling method in Service to request the API to post new Event-->
    private async Task CreateEventNow()
    {

        try
        {
            var isSuccess = await serviceserver.CreateEventAsync(NewEvent);

            if (isSuccess)
            {
                NewEvent = new TaskEvent(); 
            }
            else
            {
                errorMessage = "Failed to create event. Check details and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
    
