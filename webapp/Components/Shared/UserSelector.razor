@using core.Models
@using webapp.Service
@inject IUserService UserService

<div class="form-group">
    <label>@Label</label>
    <div>
        @if (_users == null)
        {
            <div>Loading users...</div>
        }
        else if (!_users.Any())
        {
            <div>No users available</div>
        }
        else
        {
            @foreach (var user in _users)
            {
                <div>
                    <input type="checkbox" 
                           id="@($"user_{user.Id}")"
                           checked="@(_selectedUsers[user.Id])"
                           @onchange="@(async (ChangeEventArgs e) => 
                           {
                               _selectedUsers[user.Id] = (bool)e.Value!;
                               await NotifySelectionChanged();
                           })" />
                    <label for="@($"user_{user.Id}")">
                        @user.FirstName @user.LastName
                        @if (user.Competencies.Any())
                        {
                            <span>(@string.Join(", ", user.Competencies))</span>
                        }
                    </label>
                </div>
            }
        }
    </div>
</div>

@code {
    [Parameter] public string Label { get; set; } = "Select Users";
    [Parameter] public EventCallback<List<int>> SelectedUsersChanged { get; set; }
    [Parameter] public List<int>? InitialSelectedUsers { get; set; }

    private List<User> _users = new();
    private Dictionary<int, bool> _selectedUsers = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _users = await UserService.LoadUsers();
            _selectedUsers = _users.ToDictionary(
                u => u.Id,
                u => InitialSelectedUsers?.Contains(u.Id) ?? false
            );
            await NotifySelectionChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
    }

    private async Task NotifySelectionChanged()
    {
        var selectedIds = _selectedUsers
            .Where(kvp => kvp.Value)
            .Select(kvp => kvp.Key)
            .ToList();
        await SelectedUsersChanged.InvokeAsync(selectedIds);
    }
}
