@* 
    FormInput is a generic component that can handle different data types through TValue.
    This makes it reusable for various form inputs (string, int, datetime, etc.) while maintaining type safety.
    
    Usage examples:
    <FormInput TValue="string" /> - For text inputs
    <FormInput TValue="int" /> - For numeric inputs
    <FormInput TValue="DateTime" /> - For date inputs
*@
@typeparam TValue

<div class="form-group">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }

    @switch (Type?.ToLower())
    {
        case "time":
            <input id="@Id" type="time" class="form-control" 
                   value="@timeOnlyValue"
                   @onchange="HandleTimeChange" />
            break;
            
        case "select":
            <InputSelect id="@Id" class="form-control" Value="@Value" ValueChanged="@(async (TValue val) => await ValueChanged.InvokeAsync(val))" ValueExpression="@(() => Value)">
                @if (!string.IsNullOrEmpty(DefaultOption))
                {
                    <option value="0">@DefaultOption</option>
                }
                @ChildContent
            </InputSelect>
            break;

        case "date":
            <InputDate TValue="TValue" id="@Id" class="form-control" @bind-Value="Value" />
            break;

        case "number":
            <InputNumber TValue="TValue" id="@Id" class="form-control" @bind-Value="Value" placeholder="@Placeholder" />
            break;

        default: // handles "text" and any unspecified types
            <InputText id="@Id" 
                      class="form-control" 
                      @bind-Value="@currentValue"
                      placeholder="@Placeholder" />
            break;
    }
</div>

@code {
    // Basic input attributes
    [Parameter] public string Id { get; set; } = string.Empty;
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public string DefaultOption { get; set; } = string.Empty;
    
    // The actual value of type TValue that this input manages
    [Parameter] public TValue Value { get; set; } = default!;
    // Event callback for two-way binding using @bind-Value
    [Parameter] public EventCallback<TValue> ValueChanged { get; set; }
    // Allows nested content (used primarily for select options)
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private string currentValue
    {
        get => Value?.ToString() ?? string.Empty;
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                ValueChanged.InvokeAsync(default);
                return;
            }

            try
            {
                var convertedValue = (TValue)Convert.ChangeType(value, typeof(TValue));
                ValueChanged.InvokeAsync(convertedValue);
            }
            catch
            {
                // If conversion fails, don't update the value
            }
        }
    }
    private string? timeOnlyValue
    {
        get => Value is TimeOnly time ? time.ToString("HH:mm") : null;
        set
        {
            if (value != null && TimeOnly.TryParse(value, out var parsedTime))
            {
                ValueChanged.InvokeAsync((TValue)(object)parsedTime); // Safe cast to TValue
            }
        }
    }

    private void HandleTimeChange(ChangeEventArgs args)
    {
        if (args.Value is string timeValue && TimeOnly.TryParse(timeValue, out var parsedTime))
        {
            ValueChanged.InvokeAsync((TValue)(object)parsedTime); // Update Value with TimeOnly
        }
    }
}
}
