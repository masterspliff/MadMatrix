@page "/eventsoverview"
@using webapp.Service
@inject IEventService EventService
@inject ILocationService LocationService
@inject NavigationManager NavigationManager

<h3>Event Viewer</h3>

@if (events == null)
{
    <p>Loading events...</p>
}
else if (!events.Any())
{
    <p>No events found.</p>
}
else
{
    <ul>
        <div class="event-grid">
            @foreach (var eventItem in events)
            {
                <div class="event-card">
                    <div class="card-body" style="cursor: pointer;">
                        <div class="d-flex align-items-center mb-2">
                            <div>
                                <p class="small">@eventItem.Id</p>
                                <h5 class="card-title mb-0 text-center">@eventItem.Title</h5>
                            </div>
                        </div>
                        <p class="card-text">Location: @GetLocationNameAsync(eventItem.LocationId)</p>
                        <p class="card-text">Date: @eventItem.DateForEvent</p>
                        <p class="card-text">Customer: @eventItem.ByCustomer</p>
                        <button class="btn" @onclick="() => NavigateToTasks(eventItem.Id)">View Event</button>
                    </div>
                </div>
            }
        </div>
    </ul>
}

@code {
    /// <summary>
    /// Stores the list of all events to be displayed
    /// </summary>
    private List<TaskEvent> events;

    /// <summary>
    /// Cache of location information to avoid repeated API calls
    /// Key: LocationId, Value: Location object
    /// </summary>
    private Dictionary<int, Location?> _locations = new();

    /// <summary>
    /// Initializes the component by loading all events
    /// </summary>
    /// <returns>A task representing the event loading operation</returns>
    protected override async Task OnInitializedAsync()
    {
        events = await EventService.GetAllEventsAsync();
    }

    /// <summary>
    /// Retrieves the location name for a given location ID
    /// Uses cached location data when available, otherwise fetches from service
    /// </summary>
    /// <param name="locationId">The ID of the location to look up</param>
    /// <returns>The location name or appropriate placeholder text</returns>
    private string GetLocationNameAsync(int locationId)
    {
        if (locationId <= 0)
            return "No location assigned";

        if (_locations.TryGetValue(locationId, out var location))
        {
            return location?.Name ?? "No location assigned";
        }

        var task = LocationService.GetLocationByIdAsync(locationId);
        task.ContinueWith(t =>
        {
            if (t.IsCompletedSuccessfully)
            {
                _locations[locationId] = t.Result;
                StateHasChanged();
            }
        }, TaskScheduler.Current);
        
        return "Loading...";
    }
    
    /// <summary>
    /// Navigates to the detailed view of a specific event
    /// </summary>
    /// <param name="EventId">The ID of the event to view</param>
    private void NavigateToTasks(int EventId)
    {
        NavigationManager.NavigateTo($"/eventviewer/{EventId}");
    }
}
