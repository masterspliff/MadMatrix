@page "/eventviewer/{EventId:int}"
@using webapp.Service
@using webapp.Components.EventViewer
@inject NavigationManager NavigationManager
@inject IEventService EventService
@inject ITaskService TaskService
@inject ILocationService LocationService

<div style="margin-left: 100px; margin-right: 100px">
<div class="top-row ps-3 navbar navbar-dark custom-navbar" style="border: 1px solid #ffffff; border-radius: 5px; padding-left: -16px; padding-right: -1px">
    <div class="container-fluid d-flex justify-content-between" style="margin-left: -12px; margin-right: -12px">
        <a class="navbar-brand text-black d-flex align-items-center">
            <span style="font-size: 1.25rem; color: black; font-weight: bold;">Event Oversigtsplan</span>
        </a>

        <div class="d-flex align-items-center">
            <button class="btn" @onclick="NavigateToEvents" style="margin-right: -5px">Gå tilbage</button> 
        </div>
    </div>
</div>

@if (_currentEvent == null)
{
        <p>Loading event details...</p>
}
else

{
    <div class="event-grid">    
        <div class="event-details information-pane">
            <h5>Event Detajler</h5>
            
            <h7>@_currentEvent.Title</h7>
            <p><strong>Lokation:</strong> @(_currentLocation?.Name)</p>
            <p><strong>Dato:</strong> @_currentEvent.DateForEvent</p>
            <p><strong>Kunde:</strong> @_currentEvent.ByCustomer</p>
            <p><strong>Madvalg :</strong> @_currentEvent.FoodChoices</p>
            <p><strong>Specielle Behovt:</strong> @_currentEvent.SpecialRequest</p>
            <p><strong>Deltagere:</strong> @_currentEvent.Participants</p>
        </div>
        <div class="task-overview information-pane">
            <h5>Opgave oversigt</h5>
            @foreach (var task in _tasks)
            {
                <div class="information-pane hover-effect" @onclick="() => OpenTask(task.Id)">
                    <TaskCardComponent ShowData="true" 
                              Title="@task.Title" 
                              Description="@task.Description" 
                              Status="@task.Status" 
                              AssignedTo="@task.AssignedToIds"
                              Dato="@task.Date"
                              StartTime="@task.StartTime" 
                              EndTime="@task.EndTime"
                              taskId="@task.Id"
                              OnTaskStatusUpdated="HandleTaskStatusUpdated"/>
                </div>
            }
        </div>
        @if (taskId == null)
        {
            //don't render, because we don't have a task to display
            
        }
        else
            // render the task details
            // need some logic to lookup the ?taskId={taskId} in the _tasks list
            // //get the taskId from the query string, and find that task in the _tasks list
            //then use that data to display the task details in the task card
            @if (taskId != null)
            {
                var task = _tasks.FirstOrDefault(task => task.Id == taskId);
                if (task != null)
                {
                    <div class="task-details information-pane">
                        <TaskCardComponent ShowDescription="true" 
                                  Title="@task.Title" 
                                  Description="@task.Description" 
                                  AssignedTo="@task.AssignedToIds" 
                                  Dato="@task.Date"
                                  StartTime="@task.StartTime" 
                                  EndTime="@task.EndTime"
                                  Status="@task.Status"
                                  taskId="@task.Id"
                                  OnTaskStatusUpdated="HandleTaskStatusUpdated"/>
                    </div>
                }
            }
    </div>
    
}    
<!-- get all the tasks that has the eventid. kom så jit -->
</div>

@code {
    /// <summary>
    /// The ID of the event being viewed, passed as a route parameter
    /// </summary>
    [Parameter] public int EventId { get; set; }
    
    /// <summary>
    /// The ID of the currently selected task, supplied from query parameters
    /// </summary>
    [SupplyParameterFromQuery] public int? taskId { get; set; }

    /// <summary>
    /// The current event being displayed
    /// </summary>
    private TaskEvent? _currentEvent;

    /// <summary>
    /// Location information for the current event
    /// </summary>
    private Location? _currentLocation;

    /// <summary>
    /// List of tasks associated with the current event
    /// </summary>
    private List<TaskItem> _tasks = new();
    
    /// <summary>
    /// Handles updates to a task's status
    /// Updates the local task list and triggers UI refresh
    /// </summary>
    /// <param name="update">Tuple containing taskId and new status</param>
    private async Task HandleTaskStatusUpdated((int taskId, core.Models.TaskStatus newStatus) update)
    {
        var taskToUpdate = _tasks.FirstOrDefault(t => t.Id == update.taskId);
        if (taskToUpdate != null)
        {
            taskToUpdate.Status = update.newStatus;
            StateHasChanged();
        }
    }

    /// <summary>
    /// Initializes the component by loading the event details, location, and associated tasks
    /// </summary>
    /// <returns>A task representing the initialization operation</returns>
    protected override async Task OnInitializedAsync()
    {
        _currentEvent = await EventService.GetEventByIdAsync(EventId);
        
        if (_currentEvent == null)
        {
            Console.WriteLine("Event not found");
            return;
        }

        if (_currentEvent.LocationId > 0)
        {
            _currentLocation = await LocationService.GetLocationByIdAsync(_currentEvent.LocationId);
        }

        // Create a list with just this event's ID
        var eventIds = new List<int> { EventId };
        _tasks = await TaskService.GetTasksByEventIdAsync(eventIds);
    }

    /// <summary>
    /// Navigates back to the events overview page
    /// </summary>
    private void NavigateToEvents()
    {
        NavigationManager.NavigateTo("/eventsoverview");
    }

    /// <summary>
    /// Opens the detailed view of a specific task
    /// Updates the URL with the task ID without forcing a page reload
    /// </summary>
    /// <param name="taskId">The ID of the task to display</param>
    private void OpenTask(int taskId)
    {
        NavigationManager.NavigateTo($"/eventviewer/{EventId}?taskId={taskId}",forceLoad: false, true);
        // display task on right side of the screen
    }
    }
}
