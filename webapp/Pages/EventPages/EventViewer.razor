@page "/EventViewer/{EventId:int}"
@using webapp.Service
@using webapp.Components
@inject NavigationManager NavigationManager
@inject IEventService EventService
@inject ITaskService TaskService

<div class="top-row ps-3 navbar navbar-dark custom-navbar" style="border: 1px solid #ffffff; border-radius: 5px;">
    <div class="container-fluid d-flex justify-content-between">
        <a class="navbar-brand text-black d-flex align-items-center" href="">
            <span style="font-size: 1.25rem; color: black; font-weight: bold;">Event Viewer</span>
        </a>

        <div class="d-flex align-items-center">
            <button class="btn-eaa" @onclick="NavigateToEvents">Events Overview</button> 
        </div>
    </div>
</div>

@if (_currentEvent == null)
{
        <p>Loading event details...</p>
}
else
{
    <div class="event-grid">    
        <div class="event-details information-pane">
            <h1>Event Details</h1>
            
            <h3>@_currentEvent.Title</h3>
            <p><strong>Location:</strong> @_currentEvent.LocationId</p>
            <p><strong>Date:</strong> @_currentEvent.DateForEvent</p>
            <p><strong>Customer:</strong> @_currentEvent.ByCustomer</p>
            <p><strong>Food Choices:</strong> @_currentEvent.FoodChoices</p>
            <p><strong>Special Request:</strong> @_currentEvent.SpecialRequest</p>
            <p><strong>Participants:</strong> @_currentEvent.Participants</p>
        </div>
        <div class="task-overview information-pane">
            <h1>Task Overview // DETTE SKAL VÆRE EVENT TASKS OG IKKE ALLE TASKS</h1>
            @foreach (var task in _tasks)
            {
                <div class="information-pane hover-effect" @onclick="() => OpenTask(task.Id)">
                    <TaskCard ShowData="true" Title="@task.Title" Description="@task.Description" Status="@task.Status" AssignedTo="@task.AssignedToIds" StartDate="@task.StartDate" EndDate="@task.EndDate"/>
                </div>
            }
        </div>
        @if (taskId == null)
        {
            //don't render, because we don't have a task to display
            
        }
        else
            // render the task details
            // need some logic to lookup the ?taskId={taskId} in the _tasks list
            // //get the taskId from the query string, and find that task in the _tasks list
            //then use that data to display the task details in the task card
            @if (taskId != null)
            {
                var task = _tasks.FirstOrDefault(task => task.Id == taskId);
                if (task != null)
                {
                    <div class="task-details information-pane">
                        <TaskCard ShowDescription="true" Title="@task.Title" Description="@task.Description" AssignedTo="@task.AssignedToIds" StartDate="@task.StartDate" EndDate="@task.EndDate"/>
                    </div>
                }
            }
    </div>
    
}    
<!-- get all the tasks that has the eventid. kom så jit -->

@code {

    // view the event info
    [Parameter] public int EventId { get; set; }
    [SupplyParameterFromQuery] public int? taskId { get; set; }

    
    private TaskEvent? _currentEvent;
    private List<TaskItem> _tasks = new();
    

    protected override async Task OnInitializedAsync()
    {
        _currentEvent = await EventService.GetEventByIdAsync(EventId);
        
        if (_currentEvent == null)
        {
            Console.WriteLine("Event not found");
        }
        else
        {
            _tasks = await TaskService.GetTasksByEventIdAsync(EventId);
        }
    }



    private void NavigateToEvents()
    {
        NavigationManager.NavigateTo("/Events");
    }

    private void OpenTask(int taskId)
    {
        NavigationManager.NavigateTo($"/EventViewer/{EventId}?taskId={taskId}",forceLoad: false, true);
        // display task on right side of the screen
    }
    }
}
