@page "/EventViewer/{EventId:int}"
@using webapp.Service
@inject NavigationManager NavigationManager
@inject IEventService EventService

<div class="top-row ps-3 navbar navbar-dark custom-navbar" style="border: 1px solid #ffffff; border-radius: 5px;">
    <div class="container-fluid d-flex justify-content-between">
        <a class="navbar-brand text-black d-flex align-items-center" href="">
            <span style="font-size: 1.25rem; color: black; font-weight: bold;">Event Viewer</span>
        </a>

        <div class="d-flex align-items-center">
            <button class="btn-eaa" @onclick="NavigateToEvents">Events Overview</button> 
        </div>
    </div>
</div>

@if (_currentEvent == null)
{
        <p>Loading event details...</p>
}
else
{
    <div class="event-grid"> 
        <div class="event-details">
            <h3>@_currentEvent.Title</h3>
            <p><strong>Location:</strong> @_currentEvent.LocationId</p>
            <p><strong>Date:</strong> @_currentEvent.DateForEvent</p>
            <p><strong>Customer:</strong> @_currentEvent.ByCustomer</p>
            <p><strong>Food Choices:</strong> @_currentEvent.FoodChoices</p>
            <p><strong>Special Request:</strong> @_currentEvent.SpecialRequest</p>
            <p><strong>Participants:</strong> @_currentEvent.Participants</p>
        </div>
    </div>
}    


@code {
    // view the event info
    [Parameter]
    public int EventId { get; set; }

    private TaskEvent? _currentEvent;
    
    protected override async Task OnInitializedAsync()
    {
        _currentEvent = await EventService.GetEventByIdAsync(EventId);
        if (_currentEvent == null)
        { 
            Console.WriteLine("Event not found");
        }
    }
    
    private void NavigateToEvents()
    {
        NavigationManager.NavigateTo("/Events");
    }
    
    // view the tasks individually Stacked

    // access each task (modal?)
}