@using webapp.Service.LoginService
@using webapp.Components.Dashboard
@using webapp.Components.Edit
@inject NavigationManager NavigationManager
@inject ILoginService LoginService

<div class="top-row ps-3 navbar navbar-dark custom-navbar" style="border: 1px solid #ffffff; border-radius: 5px;">
    <div class="container-fluid d-flex justify-content-between">
        <a class="navbar-brand text-black d-flex align-items-center" href="/dashboard">
            <span style="font-size: 2em; color: #3a646dff; font-weight: lighter; margin-left: -28px; ">MAD.EAAA</span>
        </a>

        <div class="d-flex align-items-center">
            @if (isUserLoggedIn)
            {
                <button class="btn-profile" data-bs-toggle="modal" data-bs-target="#profileModal">Min Profil</button>
                <button class="btn-eaa" @onclick="HandleLogout">Log ud</button>
            }
        </div>
    </div>
</div>

<ModalWrapperComponent ModalId="profileModal">
    <EditProfileComponent />
</ModalWrapperComponent>

@code {
    /// <summary>
    /// Handles the logout process by calling the login service, updating the login state,
    /// and redirecting to the home page.
    /// </summary>
    /// <returns>A task representing the asynchronous logout operation</returns>
    private async Task HandleLogout()
    {
        await LoginService.Logout();
        isUserLoggedIn = false;
        NavigationManager.NavigateTo("/", true);
    }

    /// <summary>
    /// Tracks whether a user is currently logged into the application.
    /// Used to control the visibility of profile and logout buttons.
    /// </summary>
    private bool isUserLoggedIn;

    /// <summary>
    /// Initializes the component by checking the current login state and subscribing to auth state changes.
    /// </summary>
    /// <returns>A task representing the initialization operation</returns>
    protected override async Task OnInitializedAsync()
    {
        isUserLoggedIn = await LoginService.IsLoggedIn();
        LoginService.AuthStateChanged += HandleAuthStateChanged;
    }

    /// <summary>
    /// Event handler that responds to changes in authentication state.
    /// Updates the login status and triggers a UI refresh.
    /// </summary>
    /// <param name="sender">The source of the auth state change event</param>
    /// <param name="e">Event arguments</param>
    private async void HandleAuthStateChanged(object sender, EventArgs e)
    {
        isUserLoggedIn = await LoginService.IsLoggedIn();
        await InvokeAsync(StateHasChanged);
    }
    
}
